"""
ResourceList is a FHIR data type


Underlying type: `String`
"""
scalar ResourceList

"""
Base64Binary is a stream of bytes


Underlying type: `string`
"""
scalar Base64Binary

"""
Canonical is a URI that is a reference to a canonical URL on a FHIR resource

Validation pattern: `^\S*$`
Underlying type: `string`
"""
scalar Canonical

"""
Code is a string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents

Validation pattern: `^[^\s]+(\s[^\s]+)*$`
Underlying type: `string`
"""
scalar Code

"""
Date is a date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.

Validation pattern: `^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$`
Underlying type: `string`
"""
scalar Date

"""
DateTime is a date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.

Validation pattern: `^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$`
Underlying type: `string`
"""
scalar DateTime

"""
Decimal is a rational number with implicit precision

Validation pattern: `^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$`
Underlying type: `number`
"""
scalar Decimal

"""
Instant is an instant in time - known at least to the second

Validation pattern: `^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$`
Underlying type: `string`
"""
scalar Instant

"""
Integer is a whole number

Validation pattern: `^-?([0]|([1-9][0-9]*))$`
Underlying type: `number`
"""
scalar Integer

"""
Markdown is a string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine

Validation pattern: `^[ \r\n\t\S]+$`
Underlying type: `string`
"""
scalar Markdown

"""
OID is an OID represented as a URI

Validation pattern: `^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$`
Underlying type: `string`
"""
scalar OID

"""
PositiveInt is an integer with a value that is positive (e.g. >0)

Validation pattern: `^[1-9][0-9]*$`
Underlying type: `number`
"""
scalar PositiveInt

"""
Time is a time during the day, with no date specified

Validation pattern: `^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?$`
Underlying type: `string`
"""
scalar Time

"""
UnsignedInt is an integer with a value that is not negative (e.g. >= 0)

Validation pattern: `^[0]|([1-9][0-9]*)$`
Underlying type: `number`
"""
scalar UnsignedInt

"""
URI is string of characters used to identify a name or a resource

Validation pattern: `^\S*$`
Underlying type: `string`
"""
scalar URI

"""
URL is a URI that is a literal reference

Validation pattern: `^\S*$`
Underlying type: `string`
"""
scalar URL

"""
UUID is a UUID, represented as a URI

Validation pattern: `^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`
Underlying type: `string`
"""
scalar UUID

"""
XHTML is xhtml - escaped html (see specfication)


Underlying type: `String`
"""
scalar XHTML
