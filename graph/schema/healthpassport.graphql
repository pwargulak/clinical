
enum MaritalStatus {
  A
  D
  I
  L
  M
  P
  S
  T
  U
  W
  UNK
}

enum RelationshipType {
  C
  E
  F
  I
  N
  O
  S
  U
}

enum IDDocumentType {
  national_id
  passport
  alien_id
}

type PatientEdge {
  cursor: String!
  node: FHIRPatient!
  hasOpenEpisodes: Boolean!
}

type PatientConnection {
  edges: [PatientEdge]
  pageInfo: PageInfo!
}

type PatientPayload {
  patientRecord: FHIRPatient!
  hasOpenEpisodes: Boolean!
  openEpisodes: [FHIREpisodeOfCare]
}

type EpisodeOfCarePayload {
  episodeOfCare: FHIREpisodeOfCare!
  totalVisits: Int!
}

input OTPEpisodeCreationInput {
  patientID: String!
  providerCode: String!
  msisdn: String!
  otp: String!
  fullAccess: Boolean!
}

input OTPEpisodeUpgradeInput {
  episodeID: String!
  msisdn: String!
  otp: String!
}

input BreakGlassEpisodeCreationInput {
  patientID: String!
  providerCode: String!
  practitionerUID: String!
  msisdn: String!
  patientPhone: String!
  otp: String!
  fullAccess: Boolean!
}

input PhysicalAddress {
  mapsCode: String! # can be a Plus Code or Google Maps co-ordinates
  physicalAddress: String!
}

input PostalAddress {
  postalAddress: String!
  postalCode: String!
}

input SimplePatientRegistrationInput {
  id: ID
  names: [NameInput!]!
  gender: String!
  identificationDocuments: [IdentificationDocument!]!
  birthDate: Date!
  phoneNumbers: [PhoneNumberInput!]!
  photos: [PhotoInput]
  emails: [EmailInput]
  physicalAddresses: [PhysicalAddress]
  postalAddresses: [PostalAddress]
  maritalStatus: MaritalStatus
  languages: [Language]
  active: Boolean!
  replicateUSSD: Boolean
}

input SimpleNextOfKinInput {
  patientID: String!
  names: [NameInput!]!
  phoneNumbers: [PhoneNumberInput!]!
  emails: [EmailInput]
  physicalAddresses: [PhysicalAddress]
  postalAddresses: [PostalAddress]
  gender: String!
  birthDate: Date!
  relationship: RelationshipType!
  active: Boolean!
}

input SimpleNHIFInput {
  patientID: String!
  membershipNumber: String!
  frontImageBase64: String
  frontImageContentType: ContentType
  rearImageBase64: String
  rearImageContentType: ContentType
}

input PatientExtraInformationInput {
  patientID: String!
  maritalStatus: MaritalStatus
  languages: [Language]
  emails: [EmailInput]
}

input RetirePatientInput {
  id: ID! # ID of patient to be retired
}

input EmailInput {
  email: String!
  communicationOptIn: Boolean!
}

input NameInput {
  firstName: String!
  lastName: String!
  otherNames: String
}

input IdentificationDocument {
  documentType: IDDocumentType!
  documentNumber: String!
  title: String
  imageContentType: ContentType
  imageBase64: String
}

input PhoneNumberInput {
  msisdn: String!
  verificationCode: String!
  isUSSD: Boolean!
  communicationOptIn: Boolean!
}

input PhotoInput {
  photoContentType: ContentType!
  photoBase64data: String!
  photoFilename: String!
}

extend type Query {
  openOrganizationEpisodes(providerSladeCode: String!): [FHIREpisodeOfCare!]!
  findPatientsByMSISDN(msisdn: String!): PatientConnection!
  patientSearch(search: String!): PatientConnection!
  openEpisodes(patientReference: String!): [FHIREpisodeOfCare!]!
}

extend type Mutation {
  startEpisodeByOTP(input: OTPEpisodeCreationInput!): EpisodeOfCarePayload!
  upgradeEpisode(input: OTPEpisodeUpgradeInput!): EpisodeOfCarePayload!
  startEpisodeByBreakGlass(
    input: BreakGlassEpisodeCreationInput!
  ): EpisodeOfCarePayload!
  startEncounter(episodeID: String!): String!
  endEncounter(encounterID: String!): Boolean!
  endEpisode(episodeID: String!): Boolean!
  registerPatient(input: SimplePatientRegistrationInput!): PatientPayload!
  updatePatient(input: SimplePatientRegistrationInput!): PatientPayload!
  deletePatient(input: RetirePatientInput!): Boolean!
  addNextOfKin(input: SimpleNextOfKinInput!): PatientPayload!
  addNHIF(input: SimpleNHIFInput): PatientPayload!
}
